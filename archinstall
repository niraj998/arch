#!/bin/sh

# author Niraj
# Git    niraj998

## --------- help -------------------------------------
if [ -z $1 ]; then
cat <<- EOF
arch
   This script just helps with arch installation, It has all the commands to install and
   setup archlinux. you can also run individual functions at any point after installation
   for resetting something. Before running script, look through script and customize commands
   according to your system.

arch [function]

  functions: (run from bootable media)
    set_mirrors,   Refresh mirrors with reflector.
    set_fstab,     Generate fstab.

  functions: (run as chroot/root)
    set_time,      Setups system time.
    set_hosts,     Setups host.
    set_locale,    Sets locale.
    set_network,       Setup NetworkManager.
    install_grub,  Install grub (UEFI ONLY).
    grub_config,   Recreated grub config.
    create_user,   Create user.
    set_sudo,      Add user to sudoers.
    packages,      Install necessary packages.

  functions: (run as user)
    install_yay,   Install AUR helper.
    install_xorg,  Install xorg packages.
    install_gui,   Install gui programs.
EOF
exit
fi

## --------- config -----------------------------------
. /etc/os-release
LOCALE="en_IN.UTF-8 UTF-8"  #Keep it in this format only, check locale.gen file for reference.
HOSTNAME="$ID"   #ID is name of distribution in lowercase i.e. arch,artix,...
USERNAME="niraj" #username
TIMEZONE="Asia/Kolkata"  #Keep it in this format only.


## -------------------------------------------------------
comments() { 
    # This Function echos all of it's arguments.

    echo "$@" && sleep 1
}

## --------- keymaps -------------------------------------
# loadkeys us


## --------- mirrors -------------------------------------
set_mirrors() { #run as root
   # This function uses reflector to refresh arch mirrors.
   
   comments "Installing reflector."
   pacman -S reflector --noconfirm --needed

   comments "Refreshing mirrors with reflector."
   reflector -c India,US,Germany -p https,http --sort rate --save /etc/pacman.d/mirrorlist
}

## --------- fstab --------------------------------------
set_fstab() { #run from liveiso
   # This Function Generates fstab

   comments "Generating fstab"

 if [ "$NAME" = "Artix Linux" ]; then

    ##-- at the time of fresh Installation. --##

    # Artix Linux uses fstabgen to generate fstab.
    [ $(command -v fstabgen) ] || comments "  command 'fstabgen' does not exist,
  This command is supposed to run from liveiso 
  If you are in chroot environment quit and go back to liveiso and try again.
  If you want to set fstab for and from your current system then. 
  Install artix-install-scripts package, go to this script and check set_fstab function"

    # exit script if fstabgen command doesn't exist.
    [ $(command -v fstabgen) ] || exit

    # You're supposed to run this command from liveiso after basestrap command.
    fstabgen -U /mnt > /mnt/etc/fstab

    # mount drive on startup with user previlage. replace UUID with your own.
    # comments "Adding media entry to fstab."
    # [ -d /mnt/media ] || mkdir /mnt/media && echo "UUID=DC9C095A9C093096  /media  auto  rw,auto,user,fmask=133,uid=1000,gid=1000,umask=022  0  0" >> /mnt/etc/fstab

   ##-- re-generating for current system (after Installation) --##

   # commentout above fstabcommand. and uncomment the this one.
   # fstabgen -U / > /etc/fstab  

   # mount drive on startup with user previlage, replace UUID with your own.
   # comments "Adding media entry to fstab."
   # [ -d /media ] || mkdir /media && echo "UUID=DC9C095A9C093096  /media  auto  rw,auto,user,fmask=133,uid=1000,gid=1000,umask=022  0  0" >> /etc/fstab

 else
   ##-- at the time of fresh Installation. --##

   # Arch Linux uses fstabgen to generate fstab.
   [ $(command -v genfstab) ] || comments "  command 'genfstab' does not exist,
  This command is supposed to tun from liveiso 
  If you are in chroot environment quit and go back to liveiso and try again.
  If you want to set fstab for and from your current system then. 
  Install arch-install-scripts package, go to this script and check fstab function"

   # exit script if genfstab command doesn't exist.
   [ $(command -v genfstab) ] || exit

   # At time of Installation, (from bootable device.)
   genfstab -U /mnt > /mnt/etc/fstab
   # mount drive on startup with user previlage, replace UUID with your own.
   # comments "Adding media entry to fstab."
   # [ -d /mnt/media ] || mkdir /mnt/media && echo "UUID=DC9C095A9C093096  /media  auto  rw,auto,user,fmask=133,uid=1000,gid=1000,umask=022  0  0" >> /mnt/etc/fstab

   ##-- re-generating for current system (after Installation) --##

   # commentout above fstabcommand. and uncomment the this one.
   # genfstab -U / > /etc/fstab

   # mount drive on startup with user previlage, replace UUID with your own if you want.
   # comments "Adding media entry to fstab."
   # [ -d /media ] || mkdir /media && echo "UUID=DC9C095A9C093096  /media  auto  rw,auto,user,fmask=133,uid=1000,gid=1000,umask=022  0  0" >> /etc/fstab
 fi
}

## --------- locale --------------------------------------
set_locale() { #run as root
   # This Function Setups Locale.

   comments "Settingup locale."
   comments "Adding $LOCALE to locale.gen"     # example, add line 'en_IN.UTF-8 UTF-8' to /etc/locale.gen file
   grep "^${LOCALE%% *}" /etc/locale.gen >/dev/null || echo "$LOCALE" >> /etc/locale.gen
   
   comments "Adding LANG=${LOCALE%% *} to locale.conf"  # example, add line 'LANG=en_IN.UTF-8' to /etc/locale.conf file
   [ -f "/etc/locale.conf" ] || touch /etc/locale.conf
   grep "^LANG=${LOCALE%% *}" /etc/locale.conf >/dev/null || echo "LANG=${LOCALE%% *}" > /etc/locale.conf

   comments "Adding LC_ALL=${LOCALE%% *} to /etc/environment"  # example, add line 'LC_ALL=en_IN.UTF-8' to /etc/environment file
   grep "^LC_ALL=${LOCALE%% *}" /etc/environment >/dev/null || echo "LC_ALL=${LOCALE%% *}" >> /etc/environment

   comments "Generating locale"
   locale-gen
}

## --------- hosts --------------------------------------
set_hosts() { #run as root
   # This Function Setups hostname.
   
   comments "Adding host $HOSTNAME to /etc/hostname and /etc/hosts"
   # set hostname
   [ -f "/etc/hostname" ]  ||  touch /etc/hostname
   grep "$HOSTNAME" /etc/hostname >/dev/null || echo $HOSTNAME > /etc/hostname

   # Everyone do different things in hosts file. you can edit following lines if you want to change.
   # stop adding hostname to hosts if already set.
   grep "$HOSTNAME" /etc/hosts >/dev/null && return

   # echo hostname in hosts.
echo "
127.0.0.1  localhost
::1  localhost
127.0.1.1  $HOSTNAME.localdomain  $HOSTNAME
" >> /etc/hosts
}

## --------- time --------------------------------------
set_time() { #run as root
   # This Function Setups time.

   comments "Setting up time"
   if [ "$NAME" = "Artix Linux" ]; then
     # Link localtime only if doesn't exist already
     ln -sf /usr/share/zoneinfo/$TIMEZONE  /etc/localtime

     # set systemclock to hw clock
     hwclock --systohc
   else
     # Syncronize time
     timedatectl set-ntp true

     # set systemclock to hw clock
     hwclock --systohc

     # Link localtime only if doesn't exist already
     ln -sf /usr/share/zoneinfo/$TIMEZONE  /etc/localtime

     # Set Timezone
     timedatectl set-timezone "$TIMEZONE"
   fi
}

## --------- NetworkManager, Bluetooth ------------------------------
set_network() { #run as root
   # This Function Installs and starts NetworkManager.
   comments "Settingup NetworkManager and Bluetooth"

 if [ "$NAME" = "Artix Linux" ]; then
   # Change commands here if you're not installing runit.

   ## ------- Network Manager -------- ##

   comments "Installing NetworkManager Packages"
   pacman -Sy networkmanager networkmanager-runit wpa_supplicant-runit wpa_supplicant dhcpcd dhcpcd-runit --noconfirm --needed

   comments "Enabling NetworkManager services"
   ln -s /etc/runit/sv/NetworkManager  /etc/runit/runsvdir/current
   # ln -s /etc/runit/sv/NetworkManager /run/runit/service

   ## ------- Bluetooth --------- ##

   # comments "Installing Bluetooth"
   # pacman -Syu bluez bluez-runit bluez-utils --needed --noconfirm

   # comments "Enabling Bluetooth Service"
   # ln -s /etc/runit/sv/bluetoothd  /etc/runit/runsvdir/current
   # ln -s /etc/runit/sv/bluetoothd /run/runit/service

 else
   # archlinux systemd

   ## ------- Network Manager -------- ##

   comments "Installing NetworkManager Packages"
   pacman -Syu networkmanager dhcpcd --needed --noconfirm

   comments "Enabling NetworkManager services"
   systemctl enable NetworkManager
   # systemctl start NetworkManager

   ## ------- Bluetooth --------- ##
   # comments "Installing Bluetooth"
   # pacman -Syu bluez bluez-utils --needed --noconfirm

   # comments "Enabling Bluetooth Service"
   # systemctl enable bluetooth
   # systemctl start bluetooth
 fi
}

## --------- GRUB Config ------------------------------
grub_config() { #run as root

   # comments Enabling os-prober
   # grep "^GRUB_DISABLE_OS_PROBER=false" || echo "GRUB_DISABLE_OS_PROBER=false" >> /etc/default/grub

   comments "Generating GRUB config."
   grub-mkconfig -o /boot/grub/grub.cfg
}

## --------- GRUB Install ------------------------------
install_grub() { #run as root

   comments "Installing GRUB and it's dependencies."
   pacman -S ntfs-3g dosfstools grub os-prober mtools --needed --noconfirm

   # I don't have legacy system.
  if [ -z "$(ls /sys/firmware/efi)" ]; then
   comments "\033[1;031mYou Don't have EFI System, PLEASE INSTALL & CONFIG GRUB manually, and add root password\033[00m" && exit
  fi
   pacman -S efibootmgr --needed --noconfirm

   # Change this command if you're installing on legacy system.
   comments "Running grub-install"
   grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub
   # Generate GRUB config.
   grub_config
}

## --------- Install Packages ------------------------------
packages() { #run as root
  if [ "$NAME" = "Artix Linux" ]; then
   comments "Refreshing Keyring"
   pacman -S artix-keyring --noconfirm
  else
   comments "Refreshing Keyring"
   pacman -S archlinux-keyring --noconfirm
  fi

   # Install audio.
   comments "Installing Pipewire. (and pamixer, pactl, pulsemixer for audio control)"
   pacman -S pipewire pipewire-media-session pipewire-pulse pipewire-alsa pamixer libpulse pulsemixer --needed --noconfirm
   # alsa-utils alsa-plugins libpulse

   # Install essential packages.
   comments "Installing bc git fzf neovim unrar unzip tar rsync"
   pacman -S bc git fzf neovim unrar unzip tar rsync --needed --noconfirm
} 

## --------- Create User ------------------------------
create_user() { #run as root
   grep "$USERNAME" /etc/passwd >/dev/null && comments "User $USERNAME already exists, skipping user creation" && return
   
   comments "Installing sudo"
   pacman -S sudo --noconfirm --needed

   comments "Adding User $USERNAME"
   useradd -m $USERNAME

   comments "Adding $USERNAME to groups wheel,network,audio,video,input"
   usermod -aG wheel,network,audio,video,input $USERNAME

   comments "Type Password $USERNAME"
   passwd $USERNAME
}

## --------- sudoers ------------------------------
set_sudo() { #run as root
   comments "wheel group can execute anycommands."
   grep "^%wheel ALL=(ALL:ALL) ALL" /etc/sudoers >/dev/null  || echo "%wheel ALL=(ALL:ALL) ALL" >> /etc/sudoers

   comments "$USERNAME can execute power commands without password"
   grep "$USERNAME" /etc/sudoers  >/dev/null || echo "$USERNAME ALL=(ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/reboot,/usr/bin/systemctl suspend, /usr/bin/pacman -Syu" >> /etc/sudoers
}

## --------- Install yay ------------------------------
install_yay() { #run as user

   comments "Installing go, (required by yay)"
   sudo pacman -S go --needed --noconfirm

   comments "Cloning yay repo to /home/$USERNAME/git/yay directory"
   mkdir -pv "/home/$USERNAME/git/yay"
   git clone --depth 1 "https://aur.archlinux.org/yay.git" "/home/$USERNAME/git/yay" >/dev/null
   cd "/home/$USERNAME/git/yay"

   comments "makepkg yay"
   makepkg --noconfirm -si && cd /home/$USERNAME
}


## --------- Install xorg ------------------------------
install_xorg() { #run as user

   comments "Installing xorg-packages"
   sudo pacman -S xorg-fonts-encodings xorg-server xorg-server-common xorg-setxkbmap xorg-util-macros xorg-xauth xorg-xbacklight xorg-xdpyinfo xorg-xinit xorg-xkbcomp xorg-xmessage xorg-xmodmap xorg-xprop xorg-xrandr xorg-xrdb xorg-xset xorgproto xclip xorg-xwininfo xorg-xsetroot --needed --noconfirm

   # Intel / driver specific packages.
   sudo pacman -S xf86-input-synaptics xorg-xbacklight xf86-video-intel xf86-input-libinput --needed --noconfirm
}

## --------- Install GUI ------------------------------
install_gui() { #run as user

   comments "Installing Brave, picom, awesomeWM, mpc, ncmpcpp, mpv, rofi, pavucontrol, thunar, maim, bspwm, sxhkd,lxappearance, kitty, feh, dunst, eww, blueberry."

   yay -S awesome-git brave-bin picom-jonaburg-git timidity++ mpc ncmpcpp lf-git eww-git dashbinsh --needed --noconfirm

   sudo pacman -S kitty mpv mpd ffmpeg wildmidi imagemagick feh dunst ueberzug rofi pavucontrol maim thunar lxappearance bspwm sxhkd blueberry --needed --noconfirm
}

## --------- Copy dotfiles. ------------------------------
git_setup() { #run as user
   cd
   comments "Cloning dotfiles"
   mkdir -pv /home/$USERNAME/git/dotfiles
   rm /home/$USERNAME/.bashrc
   git clone https://github.com/niraj998/dotfiles.git "/home/$USERNAME/git/dotfiles"
   cp -rf /home/$USERNAME/git/dotfiles/.* /home/$USERNAME
   sudo cp -rf /home/$USERNAME/git/dotfiles/etc/X11/* /etc/X11/
   rm -rf "/home/$USERNAME/README.md" "/home/$USERNAME/LICENSE" "/home/$USERNAME/.git" "/home/$USERNAME/.github" "/home/$USERNAME/etc"
   mkdir -pv /home/$USERNAME/git/awesome
   git clone https://github.com/niraj998/awesome.git "/home/$USERNAME/git/awesome"
   cp -r /home/$USERNAME/git/awesome/config/awesome /home/$USERNAME/.config
   cp -r /home/$USERNAME/git/awesome/fonts /home/$USERNAME/.local/share/fonts
   fc-cache -fv
   [ -f "/home/niraj/.config/shell/profile" ] && rm .bash_profile && ln -s .config/shell/profile .bash_profile
}

## --------- Arch Installation ---------------------------------
fail() {
   echo "$@ Failed " && exit 
}
 
success() {
   echo "Successfully $@" && sleep 2
}

freshinstall() { #run from chroot.
   set_time && success "Set Time." || fail "Setting up Time"
   set_hosts && success "Set Hosts." || fail "Setting up Hosts"
   set_locale && success "Set Locale." || fail "Generating Locale"
   create_user && success "Created User $USERNAME" || fail "Creating User"
   set_sudo && success "added $USERNAME to sudoers" || fail "Setting sudo"
   set_network && success "Installed and enabled NetworkManager." || fail "Setting up NetworkManager"
   install_grub && success "Installed Grub." || fail "Grub Install"
   packages && success "Installed Packages" || fail "Installing packages"
   comments "Everything seems to went Successfully, don't forget to set root password before rebooting"
   passwd
}

## ------------ Add archrepos ----------------------
archrepo() {
   # Add archlinux repo to artix.
   pacman -S artix-archlinux-support || return

echo "
# Archlinux repos.
[extra]
Include = /etc/pacman.d/mirrorlist-arch

[community]
Include = /etc/pacman.d/mirrorlist-arch

" >> pacman.conf

   pacman-key --populate archlinux
}

## ------------ User Specific and GUI ---------------
usersetup() { # run this as a user.
   install_yay && success "Installed yay" || fail "installing yay"
   install_xorg && success "Installed xorg" || fail "installing xorg"
   install_gui && success "Installed GUI Programs" || fail "installing GUI Programs"
   git_setup
}


## ----------------------------------------------------

#  start arch from bootable media.
#  connect to internet.
#  get this script.
#  run "set_mirrors" function to refresh mirrors.
#  partition & mount drives.
#  run pacstrap command.
#  run "set_fstab" function
#  chroot into installed system
#  run "archinstall" function
#  reboot 
#  login as user
#  run "usersetup" function
#  Finish.

## ----------------------------------------------------

"$@" |& tee arch_script.log
